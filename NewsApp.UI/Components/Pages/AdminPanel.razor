@page "/admin"
@using NewsApp.Shared.Constants
@using NewsApp.Shared.Models.Base
@using NewsApp.Shared.Models.Dto
@using NewsApp.Shared.Models.Dto.User
@using NewsApp.UI.Service
@inject NavigationManager Navigation
@inject CustomAuthenticationService AuthService
@inject CategoryService CategoryService
@inject UserService UserService
@rendermode InteractiveServer

<div class="admin-container">
    @if (!isAdmin)
    {
        <div class="access-denied">
            <h2>Access Denied</h2>
            <p>You need administrator privileges to access this page.</p>
            <button class="btn-back" >Back to Home</button>
        </div>
    }
    else
    {
        <div class="admin-header">
            <h2>Admin Panel</h2>
        </div>

        <div class="admin-sections">
            <!-- Категории -->
            <div class="admin-section">
                <h3>Categories Management</h3>
                <div class="category-form">
                    <input type="text" @bind="newCategoryName" placeholder="New category name"/>
                    <button class="btn-add" @onclick="AddCategory">Add Category</button>
                </div>
                <div class="categories-list">
                    @if (categories != null)
                    {
                        @foreach (var category in categories.Items)
                        {
                            <div class="category-item">
                                <span>@category.Name</span>
                                <button class="btn-delete" @onclick="() => DeleteCategory(category.Id)">
                                    <i class="oi oi-trash"></i>
                                </button>
                            </div>
                        }
                    }
                </div>
            </div>

            <div class="admin-section">
                <h3>User Roles Management</h3>
                <div class="users-list">
                    @if (users != null)
                    {
                        @foreach (var user in users.Items)
                        {
                            <div class="user-item">
                                <div class="user-info">
                                    <span>@user.Email</span>
                                    <span class="user-role">@user.Name</span>
                                </div>
                                <div class="role-controls">
                                    <button class="btn-role " @onclick="() => UpdateUserRole(user.Id,UserRoles.Admin)" >
                                        Admin
                                    </button>
                                    <button class="btn-role "@onclick="() => UpdateUserRole(user.Id,UserRoles.Premium)">
                                        Premium
                                    </button>
                                    <button class="btn-role "@onclick="() => UpdateUserRole(user.Id,UserRoles.Default)">
                                        Default
                                    </button>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isAdmin = true;
    private DataCollectionApiResponseDto<CategoryDto> categories;
    private DataCollectionApiResponseDto<UserDto> users;
    private string newCategoryName = "";
    private string UpdateRole = "";

    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //   isAdmin = await AuthService.IsInRoleAsync("Admin");
            if (!isAdmin)
            {
                return;
            }

            await LoadData();
                
            }


            StateHasChanged();
    }
    
    

    private async Task LoadData()
    {
        categories = await CategoryService.GetAllCategories();
        users = await UserService.GetAllUsers();
    }

    private async Task AddCategory()
    {
        if (string.IsNullOrWhiteSpace(newCategoryName)) return;

        Console.WriteLine(newCategoryName);
        await CategoryService.CreateCategory(new CategoryDto { Name = newCategoryName });
        newCategoryName = "";
        await LoadData();
        StateHasChanged();
    }

    private async Task DeleteCategory(Guid categoryId)
    {
        Console.WriteLine("Delete");
        await CategoryService.DeleteCategory(categoryId);
        await LoadData();
    }

    private async Task UpdateUserRole(string userId, string newRole)
    {
        await UserService.UpdateUserRole(userId, newRole);
        await LoadData();
        StateHasChanged();
    }
}

<style>
    .admin-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 2rem;
    }

    .admin-header {
        margin-bottom: 2rem;
    }

    .admin-sections {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
    }

    .admin-section {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .category-form {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .category-form input {
        flex: 1;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .categories-list, .users-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .category-item, .user-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        background: #f8f9fa;
        border-radius: 4px;
    }

    .user-item {
        flex-direction: column;
        gap: 0.5rem;
    }

    .user-info {
        display: flex;
        justify-content: space-between;
        width: 100%;
    }

    .user-role {
        font-weight: bold;
        color: #666;
    }

    .role-controls {
        display: flex;
        gap: 0.5rem;
    }

    .btn-role {
        padding: 0.25rem 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        background: white;
        cursor: pointer;
    }

    .btn-role.active {
        background: #007bff;
        color: white;
        border-color: #007bff;
    }

    .btn-add {
        padding: 0.5rem 1rem;
        background: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-delete {
        padding: 0.25rem 0.5rem;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .access-denied {
        text-align: center;
        padding: 2rem;
    }

    .btn-back {
        padding: 0.5rem 1rem;
        background: #6c757d;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 1rem;
    }
</style> 