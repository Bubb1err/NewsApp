@page "/auth"
@using NewsApp.Shared.Models.Dto.User
@using NewsApp.UI.Service
@inject CustomAuthenticationService AuthService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="auth-container">
    <div class="auth-box">
        <div class="auth-tabs">
            <button class="@(isLogin ? "active" : "")" @onclick="() => isLogin = true">Login</button>
            <button class="@(!isLogin ? "active" : "")" @onclick="() => isLogin = false">Register</button>
        </div>

        @if (isLogin)
        {
            <div class="auth-form">
                <h2>Login</h2>
                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="email">Email:</label>
                        <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Email)" />
                    </div>

                    <div class="form-group">
                        <label for="password">Password:</label>
                        <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <button type="submit" class="btn-submit">Login</button>
                </EditForm>
            </div>
        }
        else
        {
            <div class="auth-form">
                <h2>Register</h2>
                <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="name">Name:</label>
                        <InputText id="name" @bind-Value="registerModel.Name" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Name)" />
                    </div>

                    <div class="form-group">
                        <label for="reg-email">Email:</label>
                        <InputText id="reg-email" @bind-Value="registerModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    </div>

                    <div class="form-group">
                        <label for="reg-password">Password:</label>
                        <InputText type="password" id="reg-password" @bind-Value="registerModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    </div>

                    <button type="submit" class="btn-submit">Register</button>
                </EditForm>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                @errorMessage
            </div>
        }
        
       
    </div>
</div>

<style>
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #f5f5f5;
        padding: 20px;
    }

    .auth-box {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        width: 100%;
        max-width: 400px;
    }

    .auth-tabs {
        display: flex;
        margin-bottom: 2rem;
        border-bottom: 1px solid #ddd;
    }

    .auth-tabs button {
        flex: 1;
        padding: 1rem;
        border: none;
        background: none;
        cursor: pointer;
        font-size: 1rem;
        color: #666;
        transition: all 0.3s;
    }

    .auth-tabs button.active {
        color: #007bff;
        border-bottom: 2px solid #007bff;
    }

    .auth-form {
        margin-bottom: 2rem;
    }

    .auth-form h2 {
        margin-bottom: 1.5rem;
        color: #333;
        text-align: center;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #666;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }

    .btn-submit {
        width: 100%;
        padding: 0.75rem;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-submit:hover {
        background: #0056b3;
    }

    .error-message {
        color: #dc3545;
        text-align: center;
        margin-top: 1rem;
        padding: 0.5rem;
        background: #f8d7da;
        border-radius: 4px;
    }

    .continue-as-guest {
        text-align: center;
        margin-top: 1rem;
    }

    .btn-guest {
        background: none;
        border: 1px solid #007bff;
        color: #007bff;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s;
    }

    .btn-guest:hover {
        background: #007bff;
        color: white;
    }

    ::deep .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
</style>

@code {
    private bool isLogin = true;
    private string errorMessage = "";
    private LoginDto loginModel = new();
    private RegisterDto registerModel = new();
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await AuthService.IsUserAuthenticatedAsync())
            {
                NavigateToReturnUrl();
            }
            StateHasChanged();
        }
    }
    
    
    private async Task HandleLogin()
    {
        try
        {
            errorMessage = "";
            var result = await AuthService.LoginAsync(loginModel);
            if (result)
            {
                NavigateToReturnUrl();
            }
            else
            {
                errorMessage = "Invalid email or password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login";
        }
    }

    private async Task HandleRegister()
    {
        try
        {
            errorMessage = "";
            var result = await AuthService.RegisterAsync(registerModel);
            if (result)
            {
                NavigateToReturnUrl();
            }
            else
            {
                errorMessage = "Registration failed";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration";
        }
    }

    
    private void NavigateToReturnUrl()
    {
        var url = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
        NavigationManager.NavigateTo(url);
    }
}