@page "/auth"
@using NewsApp.Shared.Models.Dto.User
@using NewsApp.UI.Service
@inject CustomAuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject ILogger<Auth> Logger

@rendermode InteractiveServer

<div class="auth-container">
    <div class="auth-box">
        <div class="auth-tabs">
            <button class="@(isLogin ? "active" : "")" @onclick="() => isLogin = true">Login</button>
            <button class="@(!isLogin ? "active" : "")" @onclick="() => isLogin = false">Register</button>
        </div>

        @if (isLogin)
        {
            <div class="auth-form">
                <h2>Login</h2>
                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="email">Email:</label>
                        <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Email)" />
                    </div>

                    <div class="form-group">
                        <label for="password">Password:</label>
                        <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <button type="submit" class="btn-submit">Login</button>
                </EditForm>
            </div>
        }
        else
        {
            <div class="auth-form">
                <h2>Register</h2>
                <EditForm Model="registerModel" OnSubmit="HandleRegister">
                    <DataAnnotationsValidator />
                    
                    <div class="register-grid">
                        <div class="form-group">
                            <label for="name">Name:</label>
                            <InputText id="name" @bind-Value="registerModel.Name" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Name)" />
                        </div>

                        <div class="form-group">
                            <label for="reg-email">Email:</label>
                            <InputText id="reg-email" @bind-Value="registerModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Email)" />
                        </div>

                        <div class="form-group">
                            <label for="reg-password">Password:</label>
                            <InputText type="password" id="reg-password" @bind-Value="registerModel.Password" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Password)" />
                        </div>

                        <div class="form-group">
                            <label for="confirm-password">Confirm Password:</label>
                            <InputText type="password" id="confirm-password" @bind-Value="registerModel.ConfirmPassword" class="form-control" />
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-message">
                            @errorMessage
                        </div>
                    }

                    <button type="submit" class="btn-submit">Register</button>
                </EditForm>
            </div>
        }
        
       
    </div>
</div>

<style>
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #f5f5f5;
        padding: 20px;
    }

    .auth-box {
        background: white;
        padding: 2.5rem;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        width: 100%;
        max-width: 600px;
    }

    .auth-tabs {
        display: flex;
        margin-bottom: 2rem;
        border-bottom: 1px solid #ddd;
        gap: 1rem;
    }

    .auth-tabs button {
        flex: 1;
        padding: 1rem;
        border: none;
        background: none;
        cursor: pointer;
        font-size: 1rem;
        color: #666;
        transition: all 0.3s;
        border-radius: 8px 8px 0 0;
    }

    .auth-tabs button.active {
        color: #FF8000;
        border-bottom: 2px solid #FF8000;
    }

    .auth-form {
        margin-bottom: 2rem;
    }

    .auth-form h2 {
        margin-bottom: 1.5rem;
        color: #333;
        text-align: center;
    }

    .register-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #666;
        font-weight: 500;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 12px;
        font-size: 1rem;
        transition: all 0.3s;
    }

    .form-control:focus {
        outline: none;
        border-color: #FF8000;
        box-shadow: 0 0 0 2px rgba(255,128,0,0.1);
    }

    .btn-submit {
        width: 100%;
        padding: 0.75rem;
        background: #FF8000;
        color: white;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-top: 1rem;
    }

    .btn-submit:hover {
        background: #E67300;
    }

    .error-message {
        color: #dc3545;
        text-align: center;
        margin-top: 1rem;
        padding: 0.75rem;
        background: #f8d7da;
        border-radius: 12px;
    }

    @@media (max-width: 640px) {
        .register-grid {
            grid-template-columns: 1fr;
        }
        
        .auth-box {
            padding: 1.5rem;
        }
    }

    /deep/ .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
</style>

@code {
    private bool isLogin = true;
    private string errorMessage = "";
    private LoginDto loginModel = new();
    private RegisterDto registerModel = new();
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await AuthService.IsUserAuthenticatedAsync())
            {
                NavigateToReturnUrl();
            }
            StateHasChanged();
        }
    }
    
    
    private async Task HandleLogin()
    {
        try
        {
            errorMessage = "";
            var result = await AuthService.LoginAsync(loginModel);
            Console.WriteLine(result);
            if (result)
            {
                NavigateToReturnUrl();
            }
            else
            {
                errorMessage = "Invalid email or password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login";
        }
    }

    private async Task HandleRegister()
    {
        Logger.LogInformation("HandleRegister started");
        try
        {
            errorMessage = "";
            
            Logger.LogInformation($"Registering user: {registerModel.Email}, Name: {registerModel.Name}");
            
            if (string.IsNullOrEmpty(registerModel.Password) || 
                string.IsNullOrEmpty(registerModel.ConfirmPassword) ||
                string.IsNullOrEmpty(registerModel.Email) ||
                string.IsNullOrEmpty(registerModel.Name))
            {
                errorMessage = "All fields are required";
                Logger.LogWarning("Registration failed: Empty fields");
                return;
            }

            if (registerModel.Password != registerModel.ConfirmPassword)
            {
                errorMessage = "Passwords do not match";
                Logger.LogWarning("Registration failed: Passwords don't match");
                return;
            }
            
            Logger.LogInformation("Calling AuthService.RegisterAsync");
            var result = await AuthService.RegisterAsync(registerModel);
            
            if (result)
            {
                Logger.LogInformation("Registration successful, navigating to return URL");
                NavigateToReturnUrl();
            }
            else
            {
                errorMessage = "Registration failed";
                Logger.LogWarning("Registration failed: AuthService returned false");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration";
            Logger.LogError(ex, "Registration error");
            StateHasChanged();
        }
    }

    private void NavigateToReturnUrl()
    {
        var url = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
        Logger.LogInformation($"Navigating to: {url}");
        NavigationManager.NavigateTo(url);
    }
}