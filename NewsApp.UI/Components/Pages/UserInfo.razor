@page "/UserInfo"
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject UserService UserService
@inject CustomAuthenticationService AuthService

@using NewsApp.Shared.Models.Dto.User
@using NewsApp.UI.Service

@if (isAuthenticated)
{
    <div class="profile-container">
        <div class="profile-header">
            <div class="profile-avatar">
                <i class="oi oi-person" style="font-size: 48px;"></i>
            </div>
            <div class="profile-info">
                <h2>@_userDto.Name</h2>
                <p>@_userDto.Email</p>
            </div>
        </div>

        <div class="profile-actions">
            <div class="action-buttons">
                <button class="action-button" @onclick="getLiked">
                    <i class="oi oi-heart"></i>
                    <span>Понравившиеся</span>
                </button>
                <button class="action-button" @onclick="getSaved">
                    <i class="oi oi-bookmark"></i>
                    <span>Сохраненные</span>
                </button>
            </div>
            
            <button class="logout-button" @onclick="Logout">
                <i class="oi oi-account-logout"></i>
                <span>Выйти</span>
            </button>
        </div>
    </div>
}
else
{
    <p>Перенаправление на страницу регистрации...</p>
}

@code {
    private bool _isDialogOpen = false;
    private bool _loading = true;
    private UserDto _userDto = new UserDto();
    private bool isAuthenticated;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsUserAuthenticatedAsync();

            if (!isAuthenticated)
            {
                Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
            }
            else
            {
                _userDto = await UserService.GetUserInfo();
            }

            StateHasChanged();
        }
    }

    private async Task getLiked()
    {
        Navigation.NavigateTo("/liked-articles");
    
        
    }
    
    private async Task getSaved()
    {
        Navigation.NavigateTo("/saved-articles");

        
    }


    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        isAuthenticated = false;
    }


}

<style>
    .profile-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .profile-header {
        display: flex;
        align-items: center;
        gap: 2rem;
        margin-bottom: 2rem;
        padding-bottom: 2rem;
        border-bottom: 1px solid #eee;
    }

    .profile-avatar {
        width: 100px;
        height: 100px;
        background: #FF8000;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
    }

    .profile-info h2 {
        margin: 0;
        color: #333;
        font-size: 1.5rem;
    }

    .profile-info p {
        margin: 0.5rem 0 0;
        color: #666;
    }

    .profile-actions {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
    }

    .action-button {
        flex: 1;
        padding: 1rem;
        border: none;
        border-radius: 8px;
        background: #f5f5f5;
        color: #333;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .action-button:hover {
        background: #FF8000;
        color: white;
    }

    .logout-button {
        width: 100%;
        padding: 1rem;
        border: none;
        border-radius: 8px;
        background: #ff4444;
        color: white;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .logout-button:hover {
        background: #cc0000;
    }

    .oi {
        font-size: 1.2rem;
    }
</style>