@page "/create-article"
@using NewsApp.Shared.Models.Base
@using NewsApp.Shared.Models.Dto
@using NewsApp.UI.Service
@inject NavigationManager Navigation
@inject AricleService ArticleService
@inject CustomAuthenticationService AuthService
@inject UserService UserService
@inject CategoryService CategoryService
@rendermode InteractiveServer

<div class="create-article-container">
    <div class="header">
        <h2>Create New Article</h2>
        <button class="back-button" @onclick="GoBack">
            <i class="oi oi-arrow-left"></i>
            Back
        </button>
    </div>

    <EditForm Model="@article" OnValidSubmit="CreateArticleAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-container">
            <div class="form-group">
                <label for="title">Title</label>
                <InputText id="title" 
                          class="form-control" 
                          @bind-Value="article.Title" 
                          placeholder="Enter article title"/>
                <ValidationMessage For="@(() => article.Title)" />
            </div>

            <div class="form-group">
                <label for="category">Category</label>
                <InputSelect id="category" 
                            class="form-control" 
                            @bind-Value="article.Category.Id">
                    <option value="">Select a category...</option>
                    @if (categories != null)
                    {
                        @foreach (var category in categories.Items)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => article.Category.Id)" />
            </div>

            <div class="form-group">
                <label for="content">Content</label>
                <InputTextArea id="content" 
                              class="form-control content-area" 
                              @bind-Value="article.Content" 
                              placeholder="Write your article content here"/>
                <ValidationMessage For="@(() => article.Content)" />
            </div>

            <div class="form-group">
                <label>
                    <InputCheckbox @bind-Value="article.IsPremium" />
                    Premium Article
                </label>
            </div>

            <div class="button-group">
                <button type="submit" class="submit-button">
                    <i class="oi oi-check"></i>
                    Create Article
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private ArticleDto article = new()
    {
        Title = string.Empty,
        Content = string.Empty,
        Category = new CategoryDto(){ Id = new Guid(), Name = ""},
        IsPremium = false
    };

    private DataCollectionApiResponseDto<CategoryDto> categories;

    

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
            try
            {
                
                
                categories = await CategoryService.GetAllCategories();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading categories: {ex.Message}");
                categories = new DataCollectionApiResponseDto<CategoryDto>();
            }
                
        }


        StateHasChanged();
    }
    
    private async Task CreateArticleAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(article.Category.Id.ToString()))
            {
                return;
            }

            var success = await ArticleService.CreateArticleAsync(article);
            if (success)
            {
                Navigation.NavigateTo("/news");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating article: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/news");
    }
}

<style>
    .create-article-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .back-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        background: #f5f5f5;
        cursor: pointer;
        transition: all 0.2s;
    }

    .back-button:hover {
        background: #FF8000;
        color: white;
    }

    .form-container {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form-group label {
        font-weight: 500;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        transition: border-color 0.2s;
    }

    select.form-control {
        background-color: white;
        cursor: pointer;
    }

    select.form-control:hover {
        border-color: #FF8000;
    }

    select.form-control:focus {
        outline: none;
        border-color: #FF8000;
        box-shadow: 0 0 0 2px rgba(255, 128, 0, 0.1);
    }

    .content-area {
        min-height: 200px;
        resize: vertical;
    }

    .button-group {
        display: flex;
        justify-content: flex-end;
        margin-top: 1rem;
    }

    .submit-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 6px;
        background: #FF8000;
        color: white;
        cursor: pointer;
        transition: all 0.2s;
    }

    .submit-button:hover {
        background: #e67300;
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
</style> 