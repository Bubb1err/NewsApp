@page "/article/{id:guid}"
@using NewsApp.Shared.Models.Dto
@using MudBlazor
@using NewsApp.Shared.Models.Base
@using NewsApp.Shared.Models.Dto.Coment
@using NewsApp.UI.Service
@inject HttpClient Http
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject CommentService CommentService
<MudDialogProvider />

<MudContainer MaxWidth="MaxWidth.Large">

    @if (article == null)
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Primary" />
        <MudText Typo="Typo.body1" Class="mt-3">Loading article...</MudText>
    }
    else
    {
        <MudCard Class="mb-3">
            <MudCardContent>
                @if (article.Item.SourceUrl != null)
                {
                    <MudText Typo="Typo.h6">BBCNews</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h6">Original</MudText>

                }


                <MudText Typo="Typo.h5">@article.Item.Title</MudText>
                <MudText Typo="Typo.body2">@article.Item.PublishDate.ToShortDateString()</MudText>
                <MudText Typo="Typo.body1" Class="mt-3">@article.Item.Content</MudText>
            </MudCardContent>
        </MudCard>

        

       
    }
    <MudIconButton Icon="@Icons.Material.Filled.Comment"  aria-label="Comment" Color="Color.Primary" OnClick="OpenDialogAsync"/>



</MudContainer>



@code {
    
    [Parameter] public Guid Id { get; set; }
    private DataApiResponseDto< ArticleDto?> article;
    private string newComment = string.Empty;

    private bool isCommentDialogOpen = false;
    
    

    private async Task OpenDialogAsync()
    {
        CommentService._currentarticleId = Id;
        
        var dialog = await DialogService.ShowAsync<Dialog>("Comments");
        
    }
   
    
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Page is loading... Article ID: {Id}");
        await FetchArticleDetails();
    }
    private void OpenCommentDialog()
    {
        isCommentDialogOpen = true;
    }
    private void CloseCommentDialog()
    {
        isCommentDialogOpen = false;
    }
    private void AddComment()
    {
        if (!string.IsNullOrEmpty(newComment))
        {
            article.Item.Comments.Add(new CommentDto
            {
                Content = newComment
            });
            newComment = string.Empty; 
        }
    }

    private async Task FetchArticleDetails()
    {
        try
        {
            article = await Http.GetFromJsonAsync<DataApiResponseDto<ArticleDto>>($"http://localhost:5296/api/Articles/{Id}");
           
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching article: {ex.Message}");
        }
    }

  
}
