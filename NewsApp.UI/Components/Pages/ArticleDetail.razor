@page "/article/{id:guid}"
@using NewsApp.Shared.Models.Dto
@using MudBlazor
@using NewsApp.Shared.Models.Base
@using NewsApp.Shared.Models.Dto.Coment
@using NewsApp.UI.Service
@inject HttpClient Http
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject CommentService CommentService
@inject UserService UserService
@inject  AricleService AricleService

<MudContainer MaxWidth="MaxWidth.Medium">

    @if (article == null)
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Primary" />
        <MudText Typo="Typo.body1" Class="mt-3">Loading article...</MudText>
    }
    else
    {
        
                @if (IsPremiumBlocked)
                {
                    <div class="premium-overlay">
                        <div class="overlay-content">
                            <i class="fas fa-crown premium-icon"></i>
                            <h2>Premium Content</h2>
                            <p>This article is available only for Premium subscribers</p>
                            <button class="premium-button" @onclick="NavigateToPremium">
                                Get Premium Access
                            </button>
                        </div>
                    </div>
                }
            
       
        
        <div class="article-content @(IsPremiumBlocked ? "blur-content" : "")">
        
        <div class="article-block">
            @if (article.Author != null && !string.IsNullOrWhiteSpace(article.Author))
            {
                <p class="article-source">@article.Author</p>
            }
            else
            {
                <a href="@article.SourceUrl" class="article-source">BBC News</a>

            }

            <div class="article-header">
                @if (canEdit)
                {
                    
                    <button class="btn btn-primary" @onclick="NavigateToEdit">
                        <i class="oi oi-pencil"></i>
                    </button>
                }
            </div>

            
            <h1 class="article-header">@article.Title</h1>
            <p class="article-content">@article.Content</p>
            <div class="article-controls">
                <div>
                    <button @onclick="() => OpenDialog()" class="send-button"><i class="bi bi-chat-fill"></i></button>
                </div>
                <p>@article.PublishDate.ToShortDateString()</p>
            </div>
        </div>
        </div>

    }

</MudContainer>

<div class="custom-dialog" style="@(_isDialogOpen ? "display: flex;" : "display: none;")">
    <div class="custom-dialog-content">
        <span class="close-btn" @onclick="CloseDialog"><i class="bi bi-x-lg"></i></span>
        @if (_loading)
        {
            <div class="loader">Loading...</div>
        }
        else
        {
            <h3>Comments (@_comments.Count())</h3>
            <div class="comments-list">
                @foreach (var comment in _comments)
                {
                    <div class="comment-item @GetClassForUser(comment.UserId)">
                        <p class="comment-username" style="margin-bottom: 0;">@comment.UserName</p>
                        <div class="comment-content @GetClassForUser(comment.UserId)">
                            <p class="comment-text" style="margin-bottom: 0;">@comment.Content</p>
                        </div>
                    </div>
                }
            </div>
            <div class="comment-input-section">
                <input type="text" placeholder="Write a comment..." @bind="_newComment" class="comment-input" />
                <button @onclick="PostComment" class="send-button"><i class="bi bi-send"></i></button>
            </div>
        }
    </div>
</div>


<style>
    .custom-dialog {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .custom-dialog-content {
        background: #fff;
        border-radius: 8px;
        width: 60%;
        height: 80%;
        overflow-y: auto;
        padding: 16px;
        position: relative;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        cursor: pointer;
    }

    .loader {
        margin: auto;
        text-align: center;
    }

    .comments-list {
        margin: 16px 0;
        display: flex;
        flex-direction: column;
        height: 80%;
        overflow-y: scroll;
    }

    .comment-item {
        margin: 8px 0;
        padding: 4px;
        border-radius: 20px;
        width: 70%;
        
    }

    .comment-content {
        box-shadow: 0 5px 20px rgb(0 0 0 / 53%);
        padding: 10px 15px;
        border-radius: 20px;
    }

        .comment-item.user-1 {
            align-self: end;
        }

    .comment-content.user-1 {
        background-color: #229981;
        color: #fff;
    }

    .comment-content.user-2 {
        background-color: #fff;
    }

    .comment-username {
        font-weight: bold;
    }

    .comment-text {
        margin-top: 4px;
    }

    .comment-input-section {
        display: flex;
        gap: 8px;
        margin-top: 16px;
    }

    .comment-input {
        flex: 1;
        padding: 10px 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: 0 5px 20px rgb(0 0 0 / 53%);
        border-radius: 20px;
    }

    .blur-content {
        filter: blur(4px);
        pointer-events: none;
        user-select: none;
    }

    .premium-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .overlay-content {
        text-align: center;
        color: white;
        padding: 2rem;
        border-radius: 8px;
        background: rgba(0, 0, 0, 0.8);
    }

    .premium-icon {
        font-size: 3rem;
        color: gold;
        margin-bottom: 1rem;
    }

    .premium-button {
        margin-top: 1rem;
        padding: 0.75rem 1.5rem;
        background: #FF8000;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.2s;
    }

    .premium-button:hover {
        background: #e67300;
    }
    .send-button {
        color: #000;
        border: none;
        cursor: pointer;
    }

        .send-button:hover {
            color: #FF8000;
        }

    .send-button i {
        font-size: 2em;
    }

    .custom-dialog-content h3 {
        font-size: 36px;
        font-weight: 600;
    }
</style>

@code {

    [Parameter] public Guid Id { get; set; }
    private ArticleDto? article;
    private Dialog dialogInstance;

    private bool isCommentDialogOpen = false;

    [Inject] private CustomAuthenticationService AuthService { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }

    private bool _isDialogOpen = false;
    private bool _loading = true;
    private Guid currentArticle;
    private List<CommentDto> _comments = new();
    private string _newComment = string.Empty;
    private bool isAuthenticated = false;
    private Guid UserId;
    private bool IsPremiumBlocked = false;
    private bool canEdit = false;


   
    

    private async Task FetchArticleDetails()
    {
        try
        {
            article = await AricleService.GetAArticleByIdAsync(Id);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching article: {ex.Message}");
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsUserAuthenticatedAsync();

            if (isAuthenticated)
            {
                UserId = await UserService.GetUserIdAsync();
            }

            await FetchArticleDetails();
            
            
            if (article != null && UserId!= null)
            {
                
                var role = await AuthService.AccessInfo();
                IsPremiumBlocked = (role!="Admin" || role!="Premium") && article.IsPremium;
                
                canEdit = (role=="Admin") || (role=="Premium" && article.AuthorId == UserId);
                Console.WriteLine("TESTTESTTESTTEST");
                Console.WriteLine(role);
            }


            StateHasChanged();
        }
    }


    private async Task LoadComments()
    {
        _loading = true;
        try
        {
            _comments = await this.CommentService.GetCommentsDto(currentArticle);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task PostComment()
    {
        if (isAuthenticated)
        {
            if (!string.IsNullOrWhiteSpace(_newComment))
            {
                try
                {
                    var newComment = new CreateCommentDto()
                        {
                            Content = _newComment,
                            UserId = UserId,
                            ArticleId = currentArticle
                        };
                    await CommentService.CreateComment(newComment);
                    _comments.Clear();
                    _comments = await CommentService.GetCommentsDto(currentArticle);
                    _newComment = string.Empty;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }
            }
        }
        else
        {
            Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }
    }

    private string GetClassForUser(Guid userId)
    {
        return userId == UserId ? "dialog-item user-1" : "dialog-item user-2";
    }
    
    private void NavigateToEdit()
    {
        Navigation.NavigateTo($"/articles/edit/{Id}");
    }
    
    private void NavigateToPremium()
    {
        Navigation.NavigateTo("/premium-subscription");
    }


    public async Task OpenDialog()
    {
        currentArticle = Id;
        await LoadComments();

        _isDialogOpen = true;
        StateHasChanged();
    }

    private void CloseDialog() => _isDialogOpen = false;
}
