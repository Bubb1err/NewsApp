@page "/article/{id:guid}"
@using MudBlazor
@using NewsApp.Shared.Models
@using NewsApp.Shared.Models.Base
@using NewsApp.Shared.Models.Dto
@using NewsApp.Shared.Models.Dto.Coment
@using NewsApp.UI.Service
@using ArticleDto = NewsApp.Shared.Models.Dto.ArticleDto
@inject HttpClient Http
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject CommentService CommentService
@inject CategoryService CategoryService
@inject UserService UserService
@inject  AricleService AricleService

<MudContainer MaxWidth="MaxWidth.Medium">

    @if (article == null)
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Primary" />
        <MudText Typo="Typo.body1" Class="mt-3">Loading news...</MudText>
    }
    else
    {
        <MudContainer MaxWidth="MaxWidth.Medium">
            @if (IsPremiumBlocked)
            {
                <div class="premium-overlay">
                    <div class="overlay-content">
                        <i class="fas fa-crown premium-icon"></i>
                        <h2>Premium Content</h2>
                        <p>This article is available only for Premium subscribers</p>
                        <button class="premium-button" @onclick="NavigateToPremium">
                            Get Premium Access
                        </button>
                    </div>
                </div>
            }
            
            <div class="article-content @(IsPremiumBlocked ? "blur-content" : "")">
                <div class="article-block">
                    <div style="display: flex; justify-content: space-between;">
                        <div class="article-source">
                            @if (!string.IsNullOrWhiteSpace(article.Author))
                            {
                                <span>@article.Author</span>
                            }
                            else if (!string.IsNullOrWhiteSpace(article.SourceUrl))
                            {
                                <a href="@article.SourceUrl">BBC News</a>
                            }
                        </div>

                        @if (canEdit)
                        {
                            <div style="display: flex;">
                                <div class="edit-button">
                                    <button class="" @onclick="NavigateToEdit">
                                        <i class="bi bi-pencil" style="color: #000;font-size: 1em;"></i>
                                    </button>
                                </div>

                                <div class="edit-button">
                                    <button class="" @onclick="DeleteArticleAsync">
                                        <i class="bi bi-trash" style="color: #000;font-size: 1em;"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>


                    <div class="article-header">
                        <div class="article-title">
                            <h1>@article.Title</h1>
                        </div>

                    </div>

                    <p class="article-content">@article.Content</p>
                    <div class="article-controls">
                        <div>
                            <button @onclick="OpenDialog" class="send-button">
                                <i class="bi bi-chat-fill"></i>
                            </button>
                        </div>
                        <p>@article.PublishDate.ToShortDateString()</p>
                    </div>
                </div>
            </div>
        </MudContainer>
    }

</MudContainer>

@if (_isDialogOpen)
{
    <div class="custom-dialog">
        <div class="custom-dialog-content">
            <span class="close-btn" @onclick="CloseDialog"><i class="bi bi-x-lg"></i></span>
            @if (_loading)
            {
                <div class="loader">Loading...</div>
            }
            else
            {
                <h3>Comments (@(_comments?.Count() ?? 0))</h3>
                <div class="comments-list">
                    @if (_comments != null)
                    {
                        @foreach (var comment in _comments)
                        {
                            <div class="comment-item @GetClassForUser(comment.UserId)">
                                <p class="comment-username" style="margin-bottom: 0;">@comment.UserName</p>
                                <div class="comment-content @GetClassForUser(comment.UserId)">
                                    <p class="comment-text" style="margin-bottom: 0;">@comment.Content</p>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="comment-input-section">
                    <input type="text" placeholder="Write a comment..." @bind="_newComment" class="comment-input" />
                    <button @onclick="PostComment" class="send-button"><i class="bi bi-send"></i></button>
                </div>
            }
        </div>
    </div>
}

@if (_isEditDialogOpen && article != null)
{
    <div class="custom-dialog">
        <div class="custom-dialog-content">
            <span class="close-btn" @onclick="CloseEditDialog"><i class="bi bi-x-lg"></i></span>
            <h3>Edit Article</h3>
            
            <div class="edit-form">
                <div class="form-group">
                    <label>Title</label>
                    <input type="text" class="form-control" @bind="editArticle.Title" />
                </div>

                <div class="form-group">
                    <label>Content</label>
                    <textarea class="form-control content-area" @bind="editArticle.Content"></textarea>
                </div>

                <div class="form-group">
                    <label>Category</label>
                    <select class="form-control" @bind="editArticle.CategoryId">
                        @if (categories?.Items != null)
                        {
                            @foreach (var category in categories.Items)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label class="premium-checkbox">
                        <input type="checkbox" @bind="editArticle.IsPremium" />
                        <span>Premium Content</span>
                    </label>
                </div>

                <div class="button-group">
                    <button class="btn-save" @onclick="SaveArticleChanges">
                        <i class="bi bi-check-lg"></i>
                        Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter] public Guid Id { get; set; }
    private ArticleDto? article;
    private Dialog dialogInstance;

    private bool isCommentDialogOpen = false;

    [Inject] private CustomAuthenticationService AuthService { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }

    private bool _isDialogOpen = false;
    private bool _loading = true;
    private Guid currentArticle;
    private List<CommentDto> _comments = new();
    private string _newComment = string.Empty;
    private bool isAuthenticated = false;
    private Guid UserId;
    private bool IsPremiumBlocked = false;
    private bool canEdit = false;
    private bool _isEditDialogOpen = false;
    private UpdateArticleDto editArticle;
    private DataCollectionApiResponseDto<CategoryDto> categories;

 

    private async Task FetchArticleDetails()
    {
        try
        {
            article = await AricleService.GetAArticleByIdAsync(Id);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching article: {ex.Message}");
        }
    }
    
    private async Task DeleteArticleAsync()
    {

        Console.WriteLine("Article will be deleted");
        if (article == null || UserId == null) return;
        
        var success = await AricleService.DeleteArticleAsync(Id);
        
        if (success)
        {
            NavigateToList();
        }
    }
    private void NavigateToList()
    {
        Navigation.NavigateTo("/news");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsUserAuthenticatedAsync();

            if (isAuthenticated)
            {
                UserId = await UserService.GetUserIdAsync();
            }

            await FetchArticleDetails();
            
            
            if (article != null && UserId!= null)
            {
                categories = await CategoryService.GetAllCategories();
   
                var role = await AuthService.AccessInfo();

                Console.WriteLine(role);
                
                IsPremiumBlocked = (role!="Admin" && role!="Premium") && article.IsPremium;

                if (article.AuthorId == null && role=="Premium" )
                {
                    canEdit = false;
                }
                else
                {

                    canEdit = (role == "Admin") || (role == "Premium" && new Guid(article.AuthorId) == UserId);
                }

                Console.WriteLine(article.AuthorId);
                Console.WriteLine(UserId);
                Console.WriteLine(canEdit);
                
            }


            StateHasChanged();
        }
    }

    private async Task LoadComments()
    {
        _loading = true;
        try
        {
            _comments = await this.CommentService.GetCommentsDto(currentArticle);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task PostComment()
    {
        if (isAuthenticated)
        {
            if (!string.IsNullOrWhiteSpace(_newComment))
            {
                try
                {
                    var newComment = new CreateCommentDto()
                        {
                            Content = _newComment,
                            UserId = UserId,
                            ArticleId = currentArticle
                        };
                    await CommentService.CreateComment(newComment);
                    _comments.Clear();
                    _comments = await CommentService.GetCommentsDto(currentArticle);
                    _newComment = string.Empty;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }
            }
        }
        else
        {
            Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }
    }

    private string GetClassForUser(Guid userId)
    {
        return userId == UserId ? "dialog-item user-1" : "dialog-item user-2";
    }
    
    private async void NavigateToEdit()
    {
        
        try
        {
           
            categories = await CategoryService.GetAllCategories();
        }
        finally
        {
            _loading = false;
        }
        

        
        editArticle = new UpdateArticleDto()
        {
            ArticleId = article.Id,
            Title = article.Title,
            Content = article.Content,
            CategoryId = article.Category.Id,
            IsPremium = article.IsPremium,
            UserId = article.AuthorId
        };
        _isEditDialogOpen = true;
        StateHasChanged();
    }
    
    
    
    private async Task NavigateToPremium()
    {
        Console.WriteLine("PREMIUM");
         await UserService.GetPremium(Uri.EscapeDataString(Navigation.Uri));
         
         await AuthService.RefreshTokenAndUpdateState();
            
         await DialogService.ShowMessageBox(
             "Success",
             "Premium subscription activated successfully!",
             yesText: "OK");
         
    }

    public async Task OpenDialog()
    {
        currentArticle = Id;
        await LoadComments();

        _isDialogOpen = true;
        StateHasChanged();
    }

    private void CloseDialog() => _isDialogOpen = false;

    private async Task SaveArticleChanges()
    {
        try
        {
            var result = await AricleService.UpdateArticleAsync(editArticle);
            if (result)
            {
                await FetchArticleDetails();
                CloseEditDialog();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating article: {ex.Message}");
        }
    }

    private void CloseEditDialog()
    {
        _isEditDialogOpen = false;
        StateHasChanged();
    }
}

<style>
    .custom-dialog {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .custom-dialog-content {
        background: #fff;
        border-radius: 8px;
        width: 60%;
        height: 80%;
        overflow-y: auto;
        padding: 16px;
        position: relative;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        cursor: pointer;
    }

    .loader {
        margin: auto;
        text-align: center;
    }

    .comments-list {
        margin: 16px 0;
        display: flex;
        flex-direction: column;
        height: 80%;
        overflow-y: scroll;
    }

    .comment-item {
        margin: 8px 0;
        padding: 4px;
        border-radius: 20px;
        width: 70%;
        
    }

    .comment-content {
        box-shadow: 0 5px 20px rgb(0 0 0 / 53%);
        padding: 10px 15px;
        border-radius: 20px;
    }

        .comment-item.user-1 {
            align-self: end;
        }

    .comment-content.user-1 {
        background-color: #229981;
        color: #fff;
    }

    .comment-content.user-2 {
        background-color: #fff;
    }

    .comment-username {
        font-weight: bold;
    }

    .comment-text {
        margin-top: 4px;
    }

    .comment-input-section {
        display: flex;
        gap: 8px;
        margin-top: 16px;
    }

    .comment-input {
        flex: 1;
        padding: 10px 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: 0 5px 20px rgb(0 0 0 / 53%);
        border-radius: 20px;
    }

        .comment-input:focus {
            border: none;
        }

    .blur-content {
        filter: blur(4px);
        pointer-events: none;
        user-select: none;
    }

    .premium-overlay {
        height: 100vh;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .overlay-content {
        text-align: center;
        color: white;
        padding: 2rem;
        border-radius: 8px;
        background: rgba(0, 0, 0, 0.8);
    }

    .premium-icon {
        font-size: 3rem;
        color: gold;
        margin-bottom: 1rem;
    }

    .premium-button {
        margin-top: 1rem;
        padding: 0.75rem 1.5rem;
        background: #FF8000;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.2s;
    }

    .premium-button:hover {
        background: #e67300;
    }
    .send-button {
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        padding: 5px;
        transition: all 0.2s;
    }

    .send-button i {
        font-size: 2rem;
    }

    .send-button:hover {
        color: #FF8000;
        transform: scale(1.1);
    }

    .custom-dialog-content h3 {
        font-size: 36px;
        font-weight: 600;
    }

    .article-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        width: 100%;
        word-break: break-word;
    }

    .article-title {
        flex: 1;
    }

    .article-title h1 {
        margin: 0;
    }

    .edit-button {
        
        margin-left: 20px;
    }

    .edit-button .btn {
        padding: 8px 12px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .edit-button .bi {
        font-size: 1.2rem;
    }

   

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form-control {
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 1rem;
    }

    
    
    .content-area {
        min-height: 300px;
        height: 400px;
        resize: vertical;
        width: 100%;
        padding: 12px;
        font-size: 1rem;
        line-height: 1.5;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin-bottom: 1rem;
    }
    .custom-dialog-content {
        width: 90%;
        max-width: 800px;
        max-height: 90vh;
        overflow-y: auto;
        padding: 2rem;
    }
    .edit-form {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        padding: 1rem 0;
    }
    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }
    
    
    

    .premium-checkbox {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
    }

    .button-group {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 1rem;
    }

    .btn-save {
        padding: 0.75rem 1.5rem;
        background: #FF8000;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.2s;
    }

    .btn-save:hover {
        background: #E67300;
        transform: scale(1.02);
    }

    .btn-save i {
        font-size: 1.2rem;
    }

    .article-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #eee;
    }
</style>
