@rendermode InteractiveServer
@inject NavigationManager Navigation

@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using MudBlazor
@using NewsApp.Shared.Models.Dto.User
@inject HttpClient Http

<MudPaper Class="pa-4 mx-auto mt-6" Elevation="3" MaxWidth="400px">
    <MudText Typo="Typo.h5" Align="Align.Center">Register</MudText>

    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
        <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                      Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" @bind-Value = "RegisterModel.email"/>
        <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                      InputType="InputType.Password"
                      Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                      RequiredError="Password is required!" @bind-Value = "RegisterModel.password"/>
      
        <div class="d-flex align-center justify-space-between">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="LoginUser" Class="ml-auto">Login</MudButton>
        </div>
    
        </MudForm>

    @if (!string.IsNullOrEmpty(Message))
    {
        <MudText Typo="Typo.body1" Class="mt-2" Color="@MessageColor">@Message</MudText>
    }
</MudPaper>

@code {
    private MudForm form;
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;

    private RegisterDto RegisterModel = new();
    private bool isValid;
    private string Message;
    private Color MessageColor;

    private async Task LoginUser()
    {
        if (form.IsValid)
        {
            try
            {
                var response = await Http.PostAsJsonAsync("http://localhost:5296/api/Authentication/login", RegisterModel);
                

                if (response.IsSuccessStatusCode)
                {
                    Message = "Login successful!";
                    MessageColor = Color.Success;
                    Navigation.NavigateTo("/login");

                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Message = $"Login failed";
                    MessageColor = Color.Error;
                }
            }
            catch (Exception ex)
            {
                Message = $"An error occurred: {ex.Message}";
                MessageColor = Color.Error;
            }
        }
        else
        {
            Message = "Please fix validation errors.";
            MessageColor = Color.Warning;
        }
    }
    
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }


}
