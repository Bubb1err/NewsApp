@using NewsApp.Shared.Models.Dto.Coment
@using NewsApp.UI.Service
@rendermode InteractiveServer

@inject CommentService CommentService
@inject UserService UserService
@inject NavigationManager Navigation

@inject CustomAuthenticationService AuthService


<MudDialog  Style="width: 60vw; height: 40vw; border-radius: 16px;">

    <DialogContent>
        @if (_loading)
        {
            <MudProgressCircular Indeterminate="true" Style="margin: auto; display: block;"/>
        }
        else
        {
            <MudList T="CommentDto">
                @foreach (var comment in _comments)
                {
                    <MudListItem Class="@GetClassForUser(comment.UserId)">
                        <MudText >
                            @comment.UserName
                        </MudText>
                        <MudText >
                            @comment.Content
                        </MudText>

                    </MudListItem>
                }
            </MudList>
        }

        <div style="position: absolute; bottom: 16px; width: 95%; padding: 0 16px;">
            <!-- Input Field -->
            <div style="position: relative; width: 100%; border-radius: 50px; overflow: hidden; border: 1px solid #ccc;">
                <MudTextField
                    @bind-Value="_newComment"
                    Placeholder="Write a comment..."
                    FullWidth="true"
                    Variant="Variant.Outlined"
                     />

                <!-- Floating Button -->
                <MudFab
                    style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%); height: 32px; width: 32px; border: none; background-color: #007BFF; color: white; border-radius: 50%; cursor: pointer;"
                    Color="Color.Primary"
                    OnClick="PostComment"
                    StartIcon="@Icons.Material.Filled.Send" />
            </div>
        </div>
        
    </DialogContent>

</MudDialog>

<style>
    .dialog-item {
        background-color: #e8f5e9; 
        border-radius: 12px;      
        margin: 8px 0;            
        padding: 16px;            
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); 
    }

    .dialog-item:hover { 
        cursor: pointer;          
    }

    .dialog-item.user-1 {
        background-color: #3F5ACE; 
    }

    .dialog-item.user-2 {
        background-color: #53CE3F; 
    }
    
    
    

</style>

@code {

    private bool _loading = true;
    private Guid currentArticle;
    private List<CommentDto> _comments = new();
    private string _newComment = string.Empty;
    private bool isAuthenticated = false;

    private Guid UserId;


    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    [Inject] private HttpClient HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentArticle = CommentService._currentarticleId;
        await LoadComments();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsUserAuthenticatedAsync();

             UserId = await AuthService.GetUserId();

             Console.WriteLine(UserId);
             

            StateHasChanged();
        }
    }



    private async Task LoadComments()
    {
        _loading = true;
        try
        {
            _comments = await CommentService.GetCommentsDto(currentArticle);
        }
        catch (Exception ex)
        {
            // Handle errors (e.g., log them)
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task PostComment()
    {
        if (isAuthenticated)
        {
            if (!string.IsNullOrWhiteSpace(_newComment))
            {
                try
                {
                    var newComment = new CreateCommentDto()
                    {
                        Content = _newComment,
                        UserId = UserId,
                        ArticleId = currentArticle
                    };
                    await CommentService.CreateComment(newComment);
                    _comments.Clear();
                    _comments = await CommentService.GetCommentsDto(currentArticle);
                    _newComment = string.Empty;
                }
                catch (Exception ex)
                {
                    // ignored
                }
            }
        }
        else
        {
            Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }
    }

    private string GetClassForUser(Guid userId)
    {
        
        if (userId == UserId)
        {
            return "dialog-item user-1";
        }
        return "dialog-item user-2";

    }
        
        
    
    

    private void Ok() => MudDialog.Close(DialogResult.Ok(true));


}