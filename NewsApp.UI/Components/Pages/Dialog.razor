@using NewsApp.Shared.Models.Dto.Coment
@using NewsApp.UI.Service

<div class="custom-dialog" style="@(_isDialogOpen ? "display: flex;" : "display: none;")">
    <div class="custom-dialog-content">
        <span class="close-btn" @onclick="CloseDialog">ï¿½</span>
        @if (_loading)
        {
            <div class="loader">Loading...</div>
        }
        else
        {
            <div class="comments-list">
                @foreach (var comment in _comments)
                {
                    <div class="comment-item @GetClassForUser(comment.UserId)">
                        <p class="comment-username">@comment.UserName</p>
                        <p class="comment-text">@comment.Content</p>
                    </div>
                }
            </div>
            <div class="comment-input-section">
                <input type="text" placeholder="Write a comment..." @bind="_newComment" class="comment-input" />
                <button @onclick="PostComment" class="send-button">Send</button>
            </div>
        }
    </div>
</div>

<style>
    .custom-dialog {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .custom-dialog-content {
        background: #fff;
        border-radius: 8px;
        width: 60%;
        max-height: 80%;
        overflow-y: auto;
        padding: 16px;
        position: relative;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        cursor: pointer;
    }

    .loader {
        margin: auto;
        text-align: center;
    }

    .comments-list {
        margin: 16px 0;
    }

    .comment-item {
        margin: 8px 0;
        padding: 8px;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

        .comment-item.user-1 {
            background-color: #d3eafd;
        }

        .comment-item.user-2 {
            background-color: #f3e9d7;
        }

    .comment-username {
        font-weight: bold;
    }

    .comment-text {
        margin-top: 4px;
    }

    .comment-input-section {
        display: flex;
        gap: 8px;
        margin-top: 16px;
    }

    .comment-input {
        flex: 1;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .send-button {
        padding: 8px 16px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .send-button:hover {
            background-color: #0056b3;
        }
</style>

@code {
    private bool _isDialogOpen = false;
    private bool _loading = true;
    private Guid currentArticle;
    private List<CommentDto> _comments = new();
    private string _newComment = string.Empty;
    private bool isAuthenticated = false;
    private Guid UserId;

    [Inject] private CommentService CommentService { get; set; }
    [Inject] private CustomAuthenticationService AuthService { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }


    private async Task LoadComments()
    {
        _loading = true;
        try
        {
            _comments = await this.CommentService.GetCommentsDto(currentArticle);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task PostComment()
    {
        if (isAuthenticated)
        {
            if (!string.IsNullOrWhiteSpace(_newComment))
            {
                try
                {
                    var newComment = new CreateCommentDto()
                        {
                            Content = _newComment,
                            UserId = UserId,
                            ArticleId = currentArticle
                        };
                    await CommentService.CreateComment(newComment);
                    _comments.Clear();
                    _comments = await CommentService.GetCommentsDto(currentArticle);
                    _newComment = string.Empty;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }
            }
        }
        else
        {
            Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }
    }

    private string GetClassForUser(Guid userId)
    {
        return userId == UserId ? "dialog-item user-1" : "dialog-item user-2";
    }

    public async Task OpenDialog()
    {
                isAuthenticated = await AuthService.IsUserAuthenticatedAsync();
                UserId = new Guid("new Guid( await AuthService.GetUserIdAsync());");
                StateHasChanged();
        currentArticle = CommentService._currentarticleId;
        await LoadComments();

        _isDialogOpen = true;
    }

    private void CloseDialog() => _isDialogOpen = false;
}