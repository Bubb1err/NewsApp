@using NewsApp.Shared.Models.Dto.Coment
@using NewsApp.UI.Service
@rendermode InteractiveServer

@inject CommentService CommentService
@inject UserService UserService
@inject NavigationManager Navigation

@inject CustomAuthenticationService AuthService


<MudDialog Style="width: 1000px; max-height: 1000px; padding: 16px; border-radius: 12px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);">
    <DialogContent>
        @if (_loading)
        {
        <MudProgressCircular Indeterminate="true"  Style="margin: auto; display: block;" />
        }
        else
        {
        <MudList T="CommentDto" Style="overflow-y: auto; max-height: 400px; margin-bottom: 16px;">
            @foreach (var comment in _comments)
            {
            <MudListItem Style="padding: 8px 16px; border-bottom: 1px solid #e0e0e0;">
                <MudText Typo="Typo.body1" Style="color: #333; margin-bottom: 4px;">
                    @comment.Content
                </MudText>
                <MudText Typo="Typo.caption" Style="color: #757575;">
                    @comment.UserName
                </MudText>
            </MudListItem>
            }
        </MudList>
        }

        <MudTextField
            @bind-Value="_newComment"
            Placeholder="Write a comment..."
            Lines="3"
            FullWidth="true"
            Style="margin-bottom: 16px; border-radius: 8px;" />

        <MudButton
            Variant="Variant.Filled"
            Color="Color.Primary"
            OnClick="PostComment"
            Disabled="@string.IsNullOrWhiteSpace(_newComment)"
            Style="width: 100%; padding: 12px 0; text-transform: uppercase;">
            Post Comment
        </MudButton>
    </DialogContent>
</MudDialog>

@code {
    
    private bool _loading = true;
    private Guid currentArticle ;
    private List<CommentDto> _comments = new();
    private string _newComment = string.Empty;
    private bool isAuthenticated= false;


    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Inject]
    private HttpClient HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentArticle =  CommentService._currentarticleId;
        await LoadComments();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsUserAuthenticatedAsync();

            StateHasChanged();
        }
    }
    

    private async Task LoadComments()
    {
        _loading = true;
        try
        {
            _comments = await CommentService.GetCommentsDto(currentArticle);
        }
        catch (Exception ex)
        {
            // Handle errors (e.g., log them)
        }
        finally
        {
            _loading = false;
        }
    }
    
    private async Task PostComment()
    {
        if (isAuthenticated)
        {


            if (!string.IsNullOrWhiteSpace(_newComment))
            {
                try
                {

                    var newComment = new CreateCommentDto()
                    {
                        Content = _newComment,
                        UserId = await UserService.GetUserId(),
                        ArticleId = currentArticle
                    };
                    await CommentService.CreateComment(newComment);
                    _comments.Clear();
                    _comments = await CommentService.GetCommentsDto(currentArticle);
                    _newComment = string.Empty;
                }
                catch (Exception ex)
                {
                    // ignored
                }
            }
        }
        else
        {
            Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");

        }
        


    }

    
    

    private void Ok() => MudDialog.Close(DialogResult.Ok(true));
}