@page "/saved-articles"
@using NewsApp.Shared.Models.Dto
@using NewsApp.UI.Service
@inject NavigationManager Navigation
@inject UserService UserService
@inject CustomAuthenticationService AuthService
@rendermode InteractiveServer

@if (isAuthenticated)
{
    <div class="liked-articles-container">
        <div class="header">
            <h2>Saved articles</h2>
            <button class="back-button" @onclick="GoBack">
                <i class="oi oi-arrow-left"></i>
                Back
            </button>
        </div>

        @if (isLoading)
        {
            <div class="loading">
                <span>Loading...</span>
            </div>
        }
        else if (likedArticles == null || !likedArticles.Any())
        {
            <div class="empty-state">
                <i class="oi oi-heart"></i>
                <p>You have not save anything yet</p>
            </div>
        }
        else
        {
            <div class="articles-grid">
                @foreach (var article in likedArticles)
                {
                    <div class="article-card" @onclick="() => NavigateToArticle(article.Id)">
                       
                        <div class="article-content">
                            <h3>@article.Title</h3>
                            <div class="article-meta">
                                <span class="date">@article.PublishDate.ToShortDateString()</span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}
else
{
    <p>Перенаправление на страницу регистрации...</p>
}

@code {
    private bool isAuthenticated;
    private bool isLoading = true;
    private List<ArticleDto> likedArticles;
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsUserAuthenticatedAsync();

            if (!isAuthenticated)
            {
                Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
            }
            else
            {
                await LoadLikedArticles();
            }

            StateHasChanged();
        }
    }

    private async Task LoadLikedArticles()
    {
        try
        {
            isLoading = true;
            likedArticles = await UserService.GetUserFullBookmarks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading liked articles: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToArticle(Guid articleId)
    {
        Navigation.NavigateTo($"/article/{articleId}");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/userinfo");
    }
}

<style>
    .liked-articles-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .back-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        background: #f5f5f5;
        cursor: pointer;
        transition: all 0.2s;
    }

    .back-button:hover {
        background: #FF8000;
        color: white;
    }

    .loading {
        text-align: center;
        padding: 2rem;
        color: #666;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: #666;
    }

    .empty-state i {
        font-size: 3rem;
        margin-bottom: 1rem;
        color: #FF8000;
    }

    .articles-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 2rem;
    }

    .article-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: transform 0.2s;
        cursor: pointer;
    }

    .article-card:hover {
        transform: translateY(-4px);
    }

    .article-card img {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    .article-content {
        padding: 1.5rem;
    }

    .article-content h3 {
        margin: 0 0 1rem 0;
        font-size: 1.2rem;
        color: #333;
    }

    .article-content p {
        margin: 0 0 1rem 0;
        color: #666;
        font-size: 0.9rem;
        line-height: 1.5;
    }

    .article-meta {
        display: flex;
        justify-content: space-between;
        color: #999;
        font-size: 0.8rem;
    }
</style> 