@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject CustomAuthenticationService AuthService
@inject UserService UserService
@inject AricleService AricleService
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime

@page "/news"

@using NewsApp.Shared.Models
@using NewsApp.Shared.Models.Base
@using NewsApp.Shared.Models.Dto
@using NewsApp.Shared.Models.Dto.User
@using NewsApp.UI.Service
@using ArticleDto = NewsApp.Shared.Models.Dto.ArticleDto
@using UpdateDto = NewsApp.Shared.Models.Dto.User.UpdateDto

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

<div class="container">
    <div class="content-layout">
        <!-- Левая панель с категориями -->
        <aside class="categories-panel">
            <h3>Categories</h3>
            <div class="categories-list">
                <div class="category-item @(string.IsNullOrEmpty(selectedCategory) ? "active" : "")" 
                     @onclick="() => SelectedCategory = string.Empty">
                    All Categories
                </div>
                @if (categories != null)
                {
                    @foreach (var category in categories.Items)
                    {
                        <div class="category-item @(selectedCategory == category.Name ? "active" : "")" 
                             @onclick="() => SelectedCategory = category.Name">
                            @category.Name
                        </div>
                    }
                }
            </div>
        </aside>

        <!-- Основной контент -->
        <div class="main-content">
            <!-- Панель фильтров -->
            <div class="filters-panel">
                <div class="search-box">
                    <input type="text" 
                           placeholder="Search articles..." 
                           @bind="searchTerm" 
                           @bind:event="oninput"
                           @onkeyup="SearchKeyPressed" />
                    
                    <i class="bi bi-search search-icon "></i>

                </div>

                <div class="sort-controls">
                    <select @bind="selectedSortBy" >
                        <option value="publishDate">Sort by Date</option>
                        <option value="title">Sort by Title</option>
                        <option value="author">Sort by Author</option>
                    </select>
                    <button class="sort-direction" @onclick="ToggleSortDirection">
                        @(isDescending ? "↓" : "↑")
                    </button>
                </div>
            </div>

            @if (articles == null)
            {
                <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading articles...</p>
                </div>
            }
            else if (!articles.Items.Any())
            {
                <div class="no-results">
                    <p>No articles found matching your criteria.</p>
                </div>
            }
            else
            {
                <div class="articles-list">
                    @foreach (var article in articles.Items)
                    {
                        if (!string.IsNullOrEmpty(article.Title) && !string.IsNullOrEmpty(article.Content))
                        {
                            <article class="article-card">
                                <div class="article-actions">
                                    <button class="action-button @(Likes.Contains(article.Id) ? "active" : "")"
                                            @onclick="() => ToggleLike(article.Id)"
                                            @onclick:stopPropagation>
                                        <i class="bi bi-heart@(Likes.Contains(article.Id) ? "-fill" : "")"></i>
                                    </button>
                                    <button class="action-button @(Bookmarks.Contains(article.Id) ? "active" : "")"
                                            @onclick="() => ToggleBookmark(article.Id)"
                                            @onclick:stopPropagation>
                                        <i class="bi bi-bookmark@(Bookmarks.Contains(article.Id) ? "-fill" : "")"></i>
                                    </button>
                                </div>
                                <div class="article-header" @onclick="() => NavigateToArticleDetail(article.Id)">
                                    <h2>@article.Title</h2>

                                    <div class="article-meta">
                                        <span class="date">@article.PublishDate.ToString("MMM dd, yyyy")</span>
                                        <span class="author">@article.Author</span>
                                        @if (article.IsPremium)
                                        {
                                            <span style="font-size: 16px; color: gold;">
                                                   <i class="bi bi-star-fill"></i>

                                            </span>

                                        }
                                        @if (article.Category != null)
                                        {
                                            <span class="category-tag">@article.Category.Name</span>
                                        }
                                    </div>
                                </div>
                                <div class="article-content" @onclick="() => NavigateToArticleDetail(article.Id)">
                                    <p class="article-preview">
                                        @(article.Content.Length > 300 ? article.Content[..300] + "..." : article.Content)
                                    </p>
                                </div>
                            </article>
                        }
                    }
                </div>

                <div class="pagination-container">
                    <div class="pagination">
                        @{
                            var totalPages = articles.TotalPages;
                            var pagesToShow = GetPagesToShow(currentPage, totalPages);
                        }

                        @foreach (var pageNum in pagesToShow)
                        {
                            if (pageNum == -1) // Показываем многоточие
                            {
                                <span class="page-ellipsis">...</span>
                            }
                            else
                            {
                                <button class="page-button @(pageNum == currentPage ? "active" : "")"
                                        @onclick="() => PageChanged(pageNum)">
                                    @pageNum
                                </button>
                            }
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Правая панель с популярными статьями -->
        <aside class="popular-panel">
            <h3>Popular Articles</h3>
            <div class="popular-articles">
                @if (_topArticles?.Items != null)
                {
                    @foreach (var article in _topArticles.Items.Take(5).ToList())
                    {
                        <div class="popular-article" @onclick="() => NavigateToArticleDetail(article.Id)">
                            <h4>@article.Title</h4>
                            <div class="popular-article-meta">
                                <span class="date">@article.PublishDate.ToString("MMM dd")</span>
                                <span class="author">@article.Author</span>
                            </div>
                        </div>
                    }
                }
            </div>
        </aside>
    </div>
</div>

<style>
    .container {
        max-width: 100%;
        margin: 1rem;
        padding: 0;
    }

    .content-layout {
        display: grid;
        grid-template-columns: 200px minmax(auto, 800px) 250px;
        gap: 1rem;
        justify-content: center;
    }

    .categories-panel {
        width: 200px;
        background: #fff;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        height: fit-content;
        position: sticky;
        top: 1rem;
        grid-column: 1;
    }

    .main-content {
        grid-column: 2;
        min-width: 0;
        max-width: 800px;
        width: 100%;
        margin: 0 auto;
    }

    .popular-panel {
        grid-column: 3;
        width: 250px;
        background: #fff;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        height: fit-content;
        position: sticky;
        top: 1rem;
    }

    /* Медиа-запрос для адаптивности */
    @@media screen and (max-width: 1200px) {
        .content-layout {
            grid-template-columns: 200px minmax(auto, 800px);
            gap: 1rem;
        }
        .popular-panel {
            display: none;
        }
    }

    @@media screen and (max-width: 768px) {
        .container {
            margin: 0.5rem;
        }
        
        .content-layout {
            grid-template-columns: 1fr;
            gap: 0.5rem;
        }
        
        .categories-panel {
            position: static;
            width: 100%;
        }
        
        .main-content {
            grid-column: 1;
        }
    }

    .categories-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .category-item {
        padding: 0.75rem 1rem;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .category-item:hover {
        background: #f0f0f0;
    }

    .category-item.active {
        background: #FF8000;
        color: white;
    }

    .filters-panel {
        background: #fff;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
    }

    .search-box {
        position: relative;
        flex: 1;
    }

    .search-box input {
        width: 100%;
        padding: 0.75rem 2.5rem 0.75rem 1rem;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 1rem;
    }

    .sort-controls {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .sort-controls select {
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 1rem;
    }

    .sort-direction {
        padding: 0.75rem 1rem;
        border: 1px solid #ddd;
        border-radius: 6px;
        background: white;
        cursor: pointer;
        font-size: 1.2rem;
    }

    .articles-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .article-card {
        background: #fff;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
        position: relative;
    }

    .article-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .article-header {
        padding-right: 6rem;
        margin-bottom: 0.5rem;
    }

    .article-header h2 {
        margin: 0 0 0.25rem 0;
        font-size: 1.2rem;
        color: #333;
    }

    .article-meta {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.8rem;
        color: #666;
    }

    .article-content {
        color: #444;
        line-height: 1.4;
        font-size: 0.9rem;
    }

    .category-tag {
        display: inline-block;
        padding: 0.15rem 0.5rem;
        background: #e9ecef;
        border-radius: 20px;
        font-size: 0.75rem;
    }

    .search-icon {
        position: absolute;
        right: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: #666;
    }

    .popular-articles {
        flex: 3;
        background: #fff;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        height: fit-content;
    }

    .popular-articles h3 {
        margin: 0 0 1rem 0;
        color: #333;
    }

    .popular-article-link {
        display: block;
        padding: 0.75rem 0;
        border-bottom: 1px solid #eee;
        color: #333;
        text-decoration: none;
        transition: color 0.2s;
    }

    .popular-article-link:hover {
        color: #FF8000;
    }

    .popular-article-link p {
        margin: 0;
    }

    .pagination {
        display: flex;
        gap: 0.2rem;
        justify-content: center;
        align-items: center;
        margin: 0;
        height: 2rem;
    }

    .page-button {
        padding: 0.15rem 0.5rem;
        border: 1px solid #ddd;
        background: #fff;
        border-radius: 3px;
        cursor: pointer;
        transition: all 0.2s;
        min-width: 1.8rem;
        font-size: 0.85rem;
        height: 1.8rem;
        line-height: 1;
    }

    .page-button:hover {
        background: #f8f9fa;
    }

    .page-button.active {
        background: #FF8000;
        color: #fff;
        border-color: #FF8000;
    }

    .loading {
        text-align: center;
        padding: 2rem;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #FF8000;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: Spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    @@keyframes Spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .no-results {
        text-align: center;
        padding: 2rem;
        background: #f8f9fa;
        border-radius: 8px;
        color: #666;
    }

    .article-preview {
        margin: 0;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .popular-article {
        padding: 0.75rem;
        border-bottom: 1px solid #eee;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .popular-article:hover {
        background-color: #f8f9fa;
    }

    .popular-article h4 {
        margin: 0 0 0.5rem 0;
        font-size: 1rem;
        color: #333;
    }

    .popular-article-meta {
        display: flex;
        gap: 0.5rem;
        font-size: 0.8rem;
        color: #666;
    }

    .article-actions {
        position: absolute;
        top: 1rem;
        right: 1rem;
        display: flex;
        gap: 0.5rem;
        z-index: 1;
    }

    .action-button {
        background: white;
        border: none;
        border-radius: 50%;
        width: 2.5rem;
        height: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.2s;
        padding: 0;
        margin: 0;
        font-size: 1.2rem;
    }

    .action-button:hover {
        transform: scale(1.1);
        background: #f8f9fa;
    }

    .action-button.active {
        background: #FF8000;
        color: white;
    }

    .article-card {
        position: relative;
    }

    .pagination-container {
        position: fixed;
        bottom: -100px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(255, 255, 255, 0.0);
        padding: 0.25rem 1rem;
        border-radius: 4px;
        box-shadow: 0 -2px 10px rgba(0,0,0,0.05);
        transition: bottom 0.3s ease-in-out;
        z-index: 1000;
        width: 60%;
        max-width: 600px;
    }

    .pagination-container.visible {
        bottom: 0.5rem;
    }

    .pagination {
        display: flex;
        gap: 0.3rem;
        justify-content: center;
        align-items: center;
        margin: 0;
        height: 2rem;
    }

    .page-button {
        padding: 0.25rem 0.8rem;
        border: 1px solid rgba(0, 0, 0, 0.1);
        background: rgba(255, 255, 255, 0.9);
        border-radius: 3px;
        cursor: pointer;
        transition: all 0.2s;
        min-width: 2.2rem;
        font-size: 1rem;
        height: 2rem;
        line-height: 1;
    }

    .page-button:hover {
        background: rgba(255, 255, 255, 1);
        transform: translateY(-1px);
    }

    .page-button.active {
        background: #FF8000;
        color: #fff;
        border-color: #FF8000;
    }

    .page-ellipsis {
        padding: 0 0.3rem;
        color: #666;
        font-size: 1rem;
    }
</style>

@code {
    private DataCollectionApiResponseDto<ArticleDto>? articles;
    private DataCollectionApiResponseDto<ArticleDto>? _topArticles;
    private DataCollectionApiResponseDto<CategoryDto>? categories;
    private bool isAuthenticated = false;
    private List<Guid> Likes = [];
    private List<Guid> Bookmarks = []; 
    private string searchTerm = "";
    private string selectedCategory = "";
    
    
    private  string SelectedCategory
    {
        get => selectedCategory;
         set
        {
            selectedCategory = value;
             FilterArticles();
             StateHasChanged();

        }
    }
    
    
    private string selectedSortBy = "publishDate";
    private bool isDescending = true;
    private int currentPage = 1;
    private const int PAGE_SIZE = 20; 

    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            categories = await CategoryService.GetAllCategories();
            await LoadArticles();
            await JSRuntime.InvokeVoidAsync("initScrollHandler");
            StateHasChanged();
        }
    }
    
    

    private async Task LoadArticles()
    {
        try
        {
            var parameters = new ArticleQueryParameters
            {
                SearchTerm = searchTerm,
                CategoryName = selectedCategory,
                SortBy = selectedSortBy,
                Descending = isDescending,
                PageNumber = currentPage,
                PageSize = PAGE_SIZE 
            };

            articles = await AricleService.GetAllArticlesAsync(parameters);
            
            if (articles?.Items != null && articles.Items.Count > PAGE_SIZE)
            {
                articles.Items = articles.Items.Take(PAGE_SIZE).ToList();
            }

            _topArticles = await AricleService.GetPopularArticlesAsync();
            
            isAuthenticated = await AuthService.IsUserAuthenticatedAsync();
            if (isAuthenticated)
            {
                Likes = await UserService.GetUserLikes();
                Bookmarks = await UserService.GetUserBookmarks();
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading articles: {ex.Message}");
        }
    }

    private async Task FilterArticles()
    {
        currentPage = 1;
        await LoadArticles();
        StateHasChanged();

    }

    private async Task SearchKeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await FilterArticles();
        }
    }

    private async Task PageChanged(int page)
    {
        currentPage = page;
        await LoadArticles();
    }

    private void NavigateToArticleDetail(Guid id)
    {
        Navigation.NavigateTo($"/article/{id}");
    }

    private async void ToggleSortDirection()
    {
        isDescending = !isDescending;
        await FilterArticles();
        StateHasChanged();

    }

    private async Task ToggleLike(Guid articleId)
    {
        if (!isAuthenticated)
        {
            Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
            return;
        }

        try
        {
            var userId = await UserService.GetUserIdAsync();
            var updateDto = new UpdateDto
            {
                userId = userId.ToString(),
                articleId = articleId,
                Value = !Likes.Contains(articleId)
            };
            
            var success = await UserService.UpdateLikes(updateDto);
            if (success)
            {
                if (Likes.Contains(articleId))
                    Likes.Remove(articleId);
                else
                    Likes.Add(articleId);
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling like: {ex.Message}");
        }
    }

    private async Task ToggleBookmark(Guid articleId)
    {
        if (!isAuthenticated)
        {
            Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
            return;
        }

        try
        {
            var userId = await UserService.GetUserIdAsync();
            var updateDto = new UpdateDto
            {
                userId = userId.ToString(),
                articleId = articleId,
                Value = !Bookmarks.Contains(articleId)
            };
            
            var success = await UserService.UpdateBookmarks(updateDto);
            if (success)
            {
                if (Bookmarks.Contains(articleId))
                    Bookmarks.Remove(articleId);
                else
                    Bookmarks.Add(articleId);
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling bookmark: {ex.Message}");
        }
    }

    private List<int> GetPagesToShow(int currentPage, int totalPages)
    {
        var pages = new List<int>();
        
        if (totalPages <= 7)
        {
            pages.AddRange(Enumerable.Range(1, totalPages));
            return pages;
        }

        pages.Add(1);

        if (currentPage <= 4)
        {
            pages.AddRange(Enumerable.Range(2, 5));
            pages.Add(-1); 
            pages.Add(totalPages);
        }
        else if (currentPage >= totalPages - 3)
        {
            pages.Add(-1);
            pages.AddRange(Enumerable.Range(totalPages - 5, 5));
        }
        else
        {
            pages.Add(-1);
            pages.AddRange(Enumerable.Range(currentPage - 2, 5));
            pages.Add(-1);
            pages.Add(totalPages);
        }

        return pages;
    }
}