@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject CustomAuthenticationService AuthService
@inject UserService UserService
@inject AricleService AricleService

@page "/news"
 
@using NewsApp.Shared.Models.Base
@using NewsApp.Shared.Models.Dto
@using NewsApp.Shared.Models.Dto.User
@using NewsApp.UI.Service

<MudContainer MaxWidth="MaxWidth.Large" Style="margin-top: 5em;">

    @if (articles == null)
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Primary" />
        <MudText Typo="Typo.body1" Class="mt-3">Loading articles...</MudText>
    }
    else if (!articles.Items.Any())
    {
        <MudText Typo="Typo.body1" Class="mt-3">No articles found.</MudText>
    }
    else
    {
        <div style="display: flex">
            <div style="width: 70%;margin-right: 3em;">
                @foreach (var article in articles.Items)
                {
                    if (article.Title.Length > 0 && article.Content.Length > 0)
                    {


                        <div class="article-list-block" @onclick="() => NavigateToArticleDetail(article.Id)">
                            @if (article.SourceUrl != null)
                            {
                                <a class="article-source" href="@article.SourceUrl">BBCNews</a>
                            }
                            else
                            {
                                <p class="article-source">Original</p>

                            }
                            <h2 class="articles-list-title">@article.Title</h2>
                            <p class="articles-list-content">@article.Content.Substring(0, Math.Min(200, article.Content.Length))...</p>
                            <div class="articles-list-controls">
                                <div style="display: flex ;gap: 10px;">
                                    
                                    <MudIconButton Icon="@Icons.Material.Filled.Favorite"
                                                   Color="@(Likes.Contains(article.Id) ? Color.Primary : Color.Dark)" aria-label="Like"
                                                   OnClick="() => ToggleLike(article)" />
                                    <MudText>@article.LikeCount </MudText>

                                                            
                                    <MudIconButton Icon="@Icons.Material.Filled.Bookmark"
                                                   Color="@(Bookmarks.Contains(article.Id) ? Color.Primary : Color.Dark)" aria-label="Saved"
                                                   OnClick="() => ToggleSave(article)" />
                                    <MudText Style="" >@article.SavedCount</MudText>
                                    
                                </div>
                                <p>@article.PublishDate.ToShortDateString()</p>
                            </div>
                        </div>
                    }
                }
            </div>
            <div style="width: 30%;">
                @foreach (var article in _topArticles.Items)
                {
                    if (article.Title.Length > 0 && article.Content.Length > 0)
                    {
                        var isLiked = false;

                        var isSaved = false;


                        <div class="article-list-block" @onclick="() => NavigateToArticleDetail(article.Id)">
                            @if (article.SourceUrl != null)
                            {
                                <a style="font-size: 16px;" class="article-source" href="@article.SourceUrl">BBCNews</a>
                            }
                            else
                            {
                                <p style="font-size: 16px;" class="article-source">Original</p>

                            }
                            <h2 class="articles-list-title" style="font-size: 20px;">@article.Title</h2>
                            <p class="articles-list-content" style="font-size: 16px;">@article.Content.Substring(0, Math.Min(200, article.Content.Length))...</p>
                            <div class="articles-list-controls">
                                <div>


                                    <MudIconButton Icon="@Icons.Material.Filled.Favorite"
                                                   Color="@(Likes.Contains(article.Id) ? Color.Primary : Color.Dark)" aria-label="Like"
                                                   OnClick="() => ToggleLike(article)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Bookmark"
                                                   Color="@(Bookmarks.Contains(article.Id) ? Color.Primary : Color.Dark)" aria-label="Saved"
                                                   OnClick="() => ToggleSave(article)" />

                                </div>
                                <p>@article.PublishDate.ToShortDateString()</p>
                            </div>
                        </div>
                    }
                }
            </div>
        </div> 
    }
</MudContainer>

@code {
    private DataCollectionApiResponseDto<ArticleDto>? articles;
    private DataCollectionApiResponseDto<ArticleDto>? _topArticles;
    private bool isAuthenticated= false;

    private List<Guid> Likes = [];
    private List<Guid> Bookmarks = [];
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsUserAuthenticatedAsync();
            
            try
            {

                articles = await AricleService.GetAllArticlesAsync();
                _topArticles = await AricleService.GetPopularArticlesAsync();
                
                
                try
                {
                    
                    Likes = await UserService.GetUserLikes();
                    Bookmarks = await UserService.GetUserBookmarks();

                }
                catch (Exception e)
                {
                    Console.WriteLine("LIKES ANA BOOKMARKS ERROR");
                    Console.WriteLine(e);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching articles: {ex.Message}");
                articles = new DataCollectionApiResponseDto<ArticleDto>();
                

            }

            StateHasChanged();
        }
    }
    

    private async Task ToggleLike(ArticleDto articleDto)
    {
        
        if (isAuthenticated)
        {
                var dto = new UpdateDto();
                dto.userId = "";
                dto.Value = !Likes.Contains(articleDto.Id);
                dto.articleId = articleDto.Id;
                
                
                
                await UserService.UpdateLikes(dto);
                
                if (!Likes.Contains(articleDto.Id))
                {
                    articleDto.LikeCount++;
                    Likes.Add(articleDto.Id);
                }
                else
                {
                    articleDto.LikeCount--;
                    Likes.Remove(articleDto.Id);
                }
                StateHasChanged();



        }
        else
        {
            Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }


    }
    
    private async Task ToggleSave(ArticleDto articleDto)
    {
        if (isAuthenticated)
        {
            var dto = new UpdateDto();
            dto.userId = "";
            dto.Value = !Bookmarks.Contains(articleDto.Id);
            dto.articleId = articleDto.Id;
            
            await UserService.UpdateBookmarks(dto);
             
            if (!Bookmarks.Contains(articleDto.Id))
            {
                articleDto.SavedCount++;
                Bookmarks.Add(articleDto.Id);
            }
            else
            {
                articleDto.SavedCount--;
                Bookmarks.Remove(articleDto.Id);
            }
            

            StateHasChanged();

        }
        else
        {
            Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }

    }
    private void NavigateToArticleDetail(Guid articleId)
    {
        Navigation.NavigateTo($"/article/{articleId}");
    }

}
}