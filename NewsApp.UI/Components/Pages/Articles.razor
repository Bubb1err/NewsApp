@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject CustomAuthenticationService AuthService
@inject UserService UserService

@page "/news"
 
@using NewsApp.Shared.Models.Base
@using NewsApp.Shared.Models.Dto
@using NewsApp.Shared.Models.Dto.User
@using NewsApp.UI.Service
@inject HttpClient Http

<MudContainer MaxWidth="MaxWidth.Large" Style="margin-top: 5em;">

    @if (articles == null)
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Primary" />
        <MudText Typo="Typo.body1" Class="mt-3">Loading articles...</MudText>
    }
    else if (!articles.Items.Any())
    {
        <MudText Typo="Typo.body1" Class="mt-3">No articles found.</MudText>
    }
    else
    {
        @foreach (var article in articles.Items)
        {
            if (article.Title.Length > 0 && article.Content.Length > 0)
            {
                var isLiked = false;
            
                var isSaved = false;

                
                <div class="article-list-block" @onclick="() => NavigateToArticleDetail(article.Id)">
                    @if (article.SourceUrl != null)
                    {
                        <a class="article-source" href="@article.SourceUrl">BBCNews</a>
                    }
                    else
                    {
                        <p class="article-source">Original</p>

                    }
                    <h2 class="articles-list-title">@article.Title</h2>
                    <p class="articles-list-content">@article.Content.Substring(0, Math.Min(200, article.Content.Length))...</p>
                    <div class="articles-list-controls">
                        <div>
                            
                            
                            <MudIconButton Icon="@Icons.Material.Filled.Favorite" 
                                           Color="@(Likes.Contains(article.Id) ? Color.Primary : Color.Dark)" aria-label="Like"
                                           OnClick="() => ToggleLike(article.Id)"/>
                            <MudIconButton Icon="@Icons.Material.Filled.Bookmark" 
                                           Color="@(Bookmarks.Contains(article.Id) ? Color.Primary : Color.Dark)" aria-label="Saved"
                                           OnClick="() => ToggleSave(article.Id)"/>
                       
                            </div>
                        <p>@article.PublishDate.ToShortDateString()</p>
                    </div>
                </div>
            } 
        }
    }
</MudContainer>

@code {
    private DataCollectionApiResponseDto<ArticleDto>? articles;
    private bool isAuthenticated= false;
    
    private List<Guid> Likes = [];
    private List<Guid> Bookmarks = [];


    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsUserAuthenticatedAsync();
            
            try
            {
                articles = await Http.GetFromJsonAsync<DataCollectionApiResponseDto<ArticleDto>>("https://localhost:7220/api/Articles");
                try
                {
                    
                    Likes = await UserService.GetUserLikes();
                    Bookmarks = await UserService.GetUserBookmarks();

                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching articles: {ex.Message}");
                articles = new DataCollectionApiResponseDto<ArticleDto>();
                

            }

            StateHasChanged();
        }
    }
    

    private async Task ToggleLike(Guid id)
    {
        
        if (isAuthenticated)
        {
                var dto = new UpdateDto();
                dto.userId = "";
                dto.Value = !Likes.Contains(id);
                dto.articleId = id;
                
                
                
                await UserService.UpdateLikes(dto);
                
                if (!Likes.Contains(id))
                {
                    Likes.Add(id);
                }
                else
                {
                    Likes.Remove(id);
                }
                StateHasChanged();



        }
        else
        {
            Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }


    }
    
    private async Task ToggleSave(Guid id)
    {
        if (isAuthenticated)
        {
            var dto = new UpdateDto();
            dto.userId = "";
            dto.Value = !Bookmarks.Contains(id);
            dto.articleId = id;
            
            await UserService.UpdateBookmarks(dto);
             
            if (!Bookmarks.Contains(id))
            {
                Bookmarks.Add(id);
            }
            else
            {
                Bookmarks.Remove(id);
            }
            

            StateHasChanged();

        }
        else
        {
            Navigation.NavigateTo($"/auth?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }

    }
    private void NavigateToArticleDetail(Guid articleId)
    {
        Navigation.NavigateTo($"/article/{articleId}");
    }

}